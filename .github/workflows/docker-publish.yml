name: Docker

on:
  push:
    # Pattern matched against refs/tags
    tags:
      - 'v*'

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: sndk7-statuspage-frontend
  HARBOR_USER: ${{ secrets.HARBOR_USER }}
  HARBOR_PASSWORD: ${{ secrets.HARBOR_PASSWORD }}
  HARBOR_DOCKER_URL: ${{ secrets.HARBOR_DOCKER_URL }}

jobs:
  push:
    runs-on: [ self-hosted ]
    if: github.event_name == 'push'

    steps:
      - uses: AutoModality/action-clean@v1

      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          token: ${{ secrets.GIT_CI_PAT }}

      - name: Log into registry
        run: echo '${{ env.HARBOR_PASSWORD }}' | docker login '${{ env.HARBOR_DOCKER_URL }}'  -u '${{ env.HARBOR_USER }}' --password-stdin

      - name: Build image
        run: |
          DOCKER_BUILDKIT=1 docker build --file ./daimler.dockerfile --tag $IMAGE_NAME --build-arg ARTIFACTORY_USER='${{ secrets.ARTIFACTORY_USER }}' --build-arg ARTIFACTORY_PASSWORD='${{ secrets.ARTIFACTORY_PASSWORD }}' --build-arg ARTIFACTORY_EMAIL='${{ secrets.ARTIFACTORY_EMAIL }}' --build-arg ARTIFACTORY_URL='${{ secrets.ARTIFACTORY_URL }}' .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sndk7-statuspage-frontend'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          hide-progress: false
          exit-code: '0'

      - name: Push image
        run: |
          IMAGE_ID=${{ env.HARBOR_DOCKER_URL }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
          docker rmi $IMAGE_NAME $IMAGE_ID:$VERSION
          
          if [ "$(docker ps -aq -f status=exited)" ]; then docker ps -aq -f status=exited | xargs docker rm -f; fi
